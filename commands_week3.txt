Lesson 7

Booting:
The process of starting or restarting a computer and loading an operating system 
for the user to access.


Boot Loader:
A small program stored in ROM that loads the kernel from a storage device, 
and then starts the operating system.

Boot environment reads loader from ROM.
Boot loader executes operations to start boot process.
Can protect boot process with a password.
Can load multiple OSes into memory.
User must choose at boot.


Boot Loader Componenets:
=========================

Boot sector program:
----------------------
First component of boot loader.
Loaded by boot environment on startup with fixed 512-byte size.
Main function is to load second stage.

Second stage boot loader:
-------------------------
Loads OS and contains kernel loader.

Boot loader installer:
---------------------
Controls installation of drive sectors.
Coordinates activities of boot sector and boot loader.




BIOS:
======
A standard for firmware interfaces that is stored on a computer motherboard's ROM chip.
BIOS is first to run when computer is powered on.
Can test various hardware components.
Also runs a boot loader to start an OS.
Has access to various hardware input devices.
You can make hardware-level changes through the BIOS.
Was the dominant standard for several decades.

UEFI:
=====
Firmware technology that has largely replaced BIOS as the dominant option interface.
Advantages over BIOS:
----------------------
Runs faster.
Can operate with more memory.
Can access much larger storage drives.
Can access more hardware types.
Has improved security.
Most new motherboards/PCs ship with UEFI.
Also provides environment to execute boot loader.




Additional Boot Options:
========================


Boot from ISO:
--------------
Enables clients to retrieve boot data from network server.
Client searches for DHCP servers with PXE services.
Servers transfer boot files over TFTP.

PXE:
--------------
Enables clients to retrieve boot data from network server.
Client searches for DHCP servers with PXE services.
Servers transfer boot files over TFTP.

Boot from HTTP/FTP:
--------------
Client can acquire boot data over HTTP/FTP.
Faster, more reliable, more secure than TFTP.
Open source PXE solutions support these protocols.

Boot from NFS:
--------------
Client mounts NFS share rather than store files locally.
Retrieves share from NFS server.
DHCP/TFTP can be used to communicate boot data.




Sectors:
The smallest unit of storage read from or written to a drive.
Stores 512 bytes of data by default.
For HDDs, collection of sectors is called a track.
Number of sectors in a track varies.
So does capacity.
You can modify sector size when formatting the drive.



MBR:
The first physical sector on a storage drive and a type of partition structure.
Boot sector contains boot loader.
Also contains partition table of drive.
Determines what sectors are available to each partition.
Determines which sector is bootable and which are not.
Dominant for many years in multiple OSes.
Disadvantages:
Max space of drive is 2 TBs.
Max of 4 primary partitions.
Boot data stored in only one sector.


GPT:
Makes up for MBR's shortcomings.
Part of UEFI standard.
Every partition is assigned a GUID.
Storage space and partition numbers are practically limitless.
Any limits are likely to be imposed by OS or file system.
Stores boot data in multiple locations.
Enhances redundancy.
If one location is corrupted, GPT can recover data using a copy.
Prefer using GPT over MBR.



initrd:
The root file system that is temporarily loaded into memory upon system boot.
Loads along with kernel.
Enables system to start in two phases:
System is booted with minimal modules required to load main root file system.
Temporary file system is removed so user-space booting can continue.
Useful because many variables complicate boot process.
Kernel needs to load device driver modules.
Kernel needs to load main root file system.
Root file system could use storage methods requiring advanced setup.
The initrd handles this.
No need to hardcode behavior in kernel.


The initrd Image:
An archive file containing all the essential files that are required 
for booting the operating system.

Can be built or customized with mkinitrd command.
Include additional modules.
Remove unnecessary modules.
Update existing modules.
Usually stored in /boot directory.
Example:
mkinitrd -v --with=nfsv4 /boot/initrd-$(uname -r)-nfs.img $(uname -r)

The Boot Process:
Processor checks for BIOS/UEFI firmware.
BIOS/UEFI checks for bootable media.
BIOS/UEFI loads primary boot loader from MBR/GPT partition into memory.
User is prompted to select system to boot; default is booted if no response.
Boot loader loads initrd image into memory and transfers control to kernel.
Kernel configures hardware drivers, decompresses initrd, and mounts it.
Kernel mounts main root partition and executes systemd program.
The system program checks the target and starts various services.
If graphical mode is selected, a display manager is started.
User enters credentials.
System authenticates user and executes profile files.
Shell is started and system is ready for use.



Kernel Panic:
A mechanism by which the system detects there has been a fatal error and responds to it.
Common causes:
Kernel is corrupt.
systemd program was not executed on boot.
Kernel cannot find/mount root file system.
Malfunctioning/incompatible hardware loaded on boot.


GNU GRUB
A boot loader developed by the GNU Project that became popular on Unix-like systems.
Enables users to choose which OS/kernel version to boot from.
Original version was primary boot loader for Linux distros.
Has several limitations.
Phased out in favor of GRUB version 2.
Original is called GRUB legacy.

grub.cfg:
Main configuration file for GRUB 2 boot loader.
Located in /boot/grub/ on BIOS systems.
Located in /boot/efi/EFI/<distro>/ on UEFI systems.
Example: /boot/efi/EFI/centos/grub.cfg
File is executable shell script.
Do not edit directly.

/etc/grub.d/40_custom enables customization of boot menu.
/etc/default/grub Contains display menu settings.

grub2-mkpasswd-pbkdf2 is the command to generate a password for GRUB 2.


Lesson 8:
==========

Localization:
--------------
The process of adapting OS components for use within a distinct culture, other than the 
initial culture they were designed for.

The /usr/share/zoneinfo/  is a container for all regional time zones available on system.

Three ways to change the time zone
1- rm -f /etc/localtime; ln -s /usr/share/zoneinfo/America/Chicago /etc/localtime 
2- timedatectl set-timezone America/Los_Angeles
3- export TZ=Asia/Tokyo
4- system-config-date

timedatectl status
timedatectl list-timezones

To change the time
timedatectl set-time '08:54:33'

hwclock can correct clock's time.
hwclock -w    #to set the hardware clock same as system clock. 
hwclock --systohc  #is the same as above command
sudo hwclock -u  # To set the hardware clock to UTC

localectl to View and configure system locale/keyboard layout.
localectl list-locales
localectl status  # to see the LANG and Keyboard mapping

Examples:
localectl list-locales |grep utf8|grep uk  #To find the Ukrainian LANG Setting
localectl set-locale LANG=uk_UA.utf8       #To set LANG to ukrainian
Now switch to another user and type a wrong command and message will appear in Ukranian
localectl set-locale LANG=en_US.utf8    # to put it back to US lang locale
localectl set-keymap uk                 # To set the keyboard mapping to UK
localectl set-keymap us                 # To set the keyboard mapping back to US

date command example:
cat abc >& abc.$(date +"%d-%m-%y").log  # Create a file like abc.04-07-20.log with STDOUT and STDERR
date +"%A %F %X"  #Day, Date and Hour
date +%V          #Week of the year

date --date='4 months 2 day'   #Will show the date of the day four months and two day from now

Link below has plenty of date command examples:
https://www.cyberciti.biz/faq/how-to-add-days-to-date-and-get-new-date-on-linux/


######


Character Sets and Encoding
-----------------------------
Encoding: Converting text to bytes.
Decoding: Converting bytes to text.
Intermediary process between human and machine.
Default on most systems is UTF-8 with Unicode character set.


Display Servers:
-----------------
The component of a GUI that constructs and manages visual elements on the screen.
Linux supports many types.
X Window System and Wayland are most prominent.


The primary architectural difference between the X and Wayland display servers? 
In X, the compositor is separate from the display server. 
In Wayland, the compositor and display server are one. 
The Wayland compositor can therefore interact directly with clients, minimizing latency.



Remote Desktop Software:
-------------------------
VNC
Cross-platform; based on RFB protocol.
Server installed on remote machine; can be accessed with client.
Many different implementations.
Works with X and Wayland.

xrdp
FOSS that constructs RDP-like server for non-Windows systems.
Use rdesktop or default client to connect.
Designed to work with X.

NX:
Cross-platform and proprietary.
Supports multi-session environments; useful in large organizations.
Designed to work with X.

SPICE:
FOSS for use in virtual environments.
Often used to connect to VMs using KVM.


Services and Daemons:
---------------------
---------------------
Services are Software that responds to request from other programs.
Provides specialized functionality.
Can be critical or non-critical.
Typically implemented as daemons.
Daemon: Programs that run in the background.
No user intervention necessary.
Lie dormant until triggered.
Can operate at regular intervals.
Can be started by system, apps, or users.


System Initialization
====================
The process that begins when the kernel first loads.
Two methods on Linux: SysVinit and systemd.


Systemctl command enables you to control the systemd init daemon.
systemctl status {service}    ==>Retrieve the current status of a service.
Example: systemctl status httpd or systemctl status sshd

systemctl enable {service}    ==>Enable a service to be started on boot.
Example: systemctl enable httpd

systemctl disable {service}    ==>Disable a service so that it is no longer started on boot.
Example: systemctl disable cupsd

systemctl start {service}       ==>Start (activate) a service immediately.
Example: systemctl start sshd

systemctl stop {service}       ==>Stop (deactivate) a service immediately.
Example:systemctl stop  crond

systemctl restart {service}    ==>Restart a service immediately. Normally used after changing the config file.
Example: systemctl restart sshd

systemctl set-default {target} ==>Set the default target for the system to use on boot.
Example: systemctl set-default multiuser.target

systemctl isolate {target}    ==>Force the system to immediately change to the
provided target.
Example: systemctl isolate graphical.target

systemctl mask {unit file}    ==>Prevent the provided unit file from being enabled
or activated, even when done manually.
Example: systemctl mask cupsd

Systemctl command Examples:
----------------------------
systemctl isolate graphical.target 
systemctl isolate multi-user.target 
systemctl set-default graphical.target
systemctl stop firewalld
systemctl start httpd
systemctl status sshd


hostnamectl command examples:
------------------------------
hostnamectl set-hostname server01


systemd-analyze:
Retrieves performance stats for boot operations
Examaple:
systemd-analyze blame    #Used to identify services/units that make system slow to boot.


What is the SysVinit equivalent of "systemctl enable httpd.service"?
sudo chkconfig httpd on

Processes:
==============
A process is a unique integer assigned to each new process when it starts.

ps -e     ==> Select all processes
ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head  ==> Top 10 RAM consuming processes.
ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head  ==> Top 10 CPU consuming processes.

top  and htop commands are interactive process viewers

systemd-anlayze blame

lsof command examples:
---------------------
https://www.tecmint.com/10-lsof-command-examples-in-linux/
lsof -u cadmin    ==> This command will display the list of all opened files of user cadmin
lsof -i TCP:22    ==> find process running on port 22
lsof -i TCP:1-1024 ==> List Open Files of TCP Port ranges 1-1024
lsof -i -u^root    ==> Exclude root user but list all open ports to all other users.
lsof -i -u cadmin ==> Find Out whos Looking What Files and Commands
lsof -i           ==> List all Network Connections ESTABLISED & LISTENING
kill -9 `lsof -t -u cadmin`  ==> Kill all Activity of Particular User



nice and renice commands:
------------------------
nice -10 ./test-new.sh   ==> Scheduling priority to be 10
renice -n 15 -p 7314     ==> Changing the priority of PID 7314 to 15
renice -n 20 -g sales    ==> How to change priority for all processes belonging to a group?
renice -n 5 -u james  ==> How to change priority for all processes belonging to a user?



Foreground & background Processes
==================================
Most commands execute in foreground.
Shell is "consumed" until process finishes.
Not a problem for simple commands.
Can be an issue for longer commands or scripts.
Example:
/home/stdnt16/backup.sh &   # Put this script in the background so it doesn't consume shell.
fg %<job ID>
fg %1                        ==> Move job 1 to foreground
Press Ctrl+Z to temporarily pause job.  
Use jobs to discover job ID of script.
bg %1                       ==> Move job 2 to background



nohup prevents process from ending when user logs off
nohup /home/stdnt16/backup.sh &


Kill Command:
------------------
https://www.tecmint.com/how-to-kill-a-process-in-linux/
kill -l               # will list all the kill signals
kill 1212 1313 1414   # Will send a TERM/SIGTERM (15) to multiple pids # 1212, 1313, and 1414
kill -s stop 4242     # To send stop/suspend signal for pid # 4242
kill -s CONT 4242     #Resume/run stopped pid 4242 by sending CONT (continue) signal

Sending a SIGKILL (To be used as a last resort)
-------------------------------------------------
The following all are equivalent commands with -9 SIGKILL (i.e forcefully kill 1414 
process without "clean up") and should be only use as last resort to kill process:

kill -s SIGKILL 1414 
kill -s KILL 1414 
kill -s 9 1414 
kill -9 1414 
kill -SIGKILL 1414 
kill -KILL 1414


pkill 
Sends kill signal to processes based on pattern.
Similar to pgrep but actually sends signal.

killall
Sends kill signal to processes based on name.
Similar to pkill with some functional differences.

pidof Examples
pidof httpd 
The following commands achieve the same goal
1- pidof httpd|xargs kill
2- pkill httpd
3- ps aux |grep httpd |grep -v grep |awk '{print $2}' |xargs kill

$ sudo killall -o 5m sshd # kill processes older than 5 minutes
$ sudo killall -o 2w sshd # kill processes older than 2 weeks
$ sudo killall -o 1M sshd # kill processes older than 1 month

$ sudo killall -y 5m sshd # kill processes younger than 5 minutes
$ sudo killall -y 2w sshd # kill processes younger than 2 weeks
$ sudo killall -y 1M sshd # kill processes younger than 1 month

What is the characteristic of a zombie process that makes it a problem for administrators?
A zombie is a process that was terminated, but has not yet been released by its parent process. 
It is in a "zombie-like" state where it cannot accept a kill signal 
because the process isn't available anymore.


How to you check memory usage while using the top command:
top then press M(uppercase)


/proc/cpuinfo    ==> Contains info about system's processor.
/proc/meminfo    ==> Contains info about system's memory.

uptime command:
Displays time from when a system started.
Also displays CPU load average.


sar command:
Displays system usage reports.
Reports have various sections with data points and time of collection.
Default mode shows CPU usage.
Examples:
cd /var/log/sa
sar -f sa5   # Will display system performance on the 5th of the month
sar          # will display system performance for today
sar -d -p    # will pretty (-p) print disk stats instead of cpu.
sar -P ALL   # gathers CPU statistics for all CPUs.


free command:
Parses /proc/meminfo for easier analysis.
Default output for memory and swap space:
Total
Total used
Total free
Total shared
Total buffered/cached
Total available for new apps
Example:
free -th


vmstat command
Displays stats about virtual memory and other system resources.
Example: vmstat 1 20  

OOM Killer:
-----------
A feature of the Linux kernel that determines what process(es) to kill 
when the system is extremely low on memory.

swap commands:
mkswap command Creates swap space on a partition.
swapon command activates a swap partition.
swapoff command deactivates a swap partition.





Lesson 9:
========
Managing Devices:
==================

What is the significance of udev?
---------------------------------
Prior to systemd and new kernels, the /dev/ directory only contained static device files.
udev brings dynamic device creation and removal.


How to find Hardware information:
------------------------
lshw -short
lshw -class disk               # Finds details of disk information
lshw -class memory
lshw -class network
lshw -c input

smartctl -i /dev/sdc            # Finds details of disk info as well may have extra
hwinfo --disk
udevadm info --query=property --name /dev/sdc


udevadm info --query=property --name /dev/sdc

udev rules directories:
------------------------
/lib/udev/rules.d/  The default rules directory
/etc/udev/rules.d/  The custom rules directory. These rules take precedence.
https://www.thegeekdiary.com/beginners-guide-to-udev-in-linux/

CUPS  (Common Unix Printing System) 
===================================
A print management system for Linux that enables a computer to function as a print server.

Printing In Linux
The simplest way to print in Linux is to cat a file to the printing device, like this:

sudo cat my-file-to-print.txt > /dev/lp
sudo lpr myfile.txt
lpr -#3 myfile.txt    # Print 3 copies of myfile.txt.
lpr -P HPLJ5 students.txt




The lsusb Command:root
----------------
Displays info about devices connected to USB.
Scans /dev/bus/usb/ directory.



The lspci Command:
-----------------
Displays info about devices connected to PCI bus.
Lists logical slot address, device class, and vendor/product.
Includes verbose option for more details about devices.


The lpq Command:
----------------
Shows status of printer queue.
Reports for each job:
The job's rank.
Who owns the job.
The name of the files in the job.
The size of the job.
Use +interval to update report every specified number of seconds.
Will use default printer if none specified.
 

Additional Device Monitoring Tools:
-----------------------------------
Some tools you've used before can also be useful in monitoring devices.
Example: lsblk
Identify block storage devices.
Ensure devices are recognized.
Ensure devices are correctly partitioned/mounted.
Example: dmesg
Show device driver messages sent to kernel.
Can include errors in operation or module loading failures.
Monitor for issues related to drivers or underlying hardware.


Printer Issues:
---------------
lpq    ==> To check the job status
lprm {job #} to stop large or numerous jobs.

Memory Issues:
--------------
mcelog  #Some issues are with the physical RAM. "Machine Check Exception" errors during operation.
abrt-cli ls   #


The dmidecode Command:
---------------------
Dumps DMI table and presents it in human-readable format.
DMI table is an industry standard for tracking hardware.
Separates hardware into types.
Verify if devices are connected and their supported features.
DMI tables are often inaccurate or incomplete.
Don't rely on them as sole source of info.

